Настройка модели:
    Именование таблиц => table - Если таблица БД вашей модели не соответствует этому соглашению, вы можете вручную указать имя таблицы модели, определив свойство
    Соединения с БД => connection - Если вы хотите указать другое соединение, которое должно использоваться при взаимодействии с определенной моделью, вы должны определить свойство $connection модели
    Первичные ключи => primaryKey - При необходимости вы можете определить защищенное свойство $primaryKey в модели, чтобы указать другой столбец, который служит первичным ключом
    Временные метки => timestamps - Если вы не хотите, чтобы эти столбцы автоматически управлялись Eloquent, вы должны определить свойство $timestamps модели со значением false
    Значения атрибутов по умолчанию => attributes - Если вы хотите определить значения по умолчанию для некоторых атрибутов модели, то укажите необходимые значения в свойстве $attributes модели


Resource - позволяет нам формировать свой массив нужных нам полей данных из таблицы, создается командой make:resource


Стандартные методы из модели, для работы с бд:
    Получение моделей =>
        all() - Метод модели получит все записи из связанной с моделью таблицы БД,
        findOrFail($id) - Метод модели получит одну записи по $id из связанной с моделью таблицы БД, Нет записи выведет ошибку
        find(id) - Метод модели получит одну запись по $id из связанной с моделью таблицы БД
    Вставка моделей =>
        Чтобы вставить новую запись в БД, вы должны создать экземпляр новой модели и установить атрибуты модели. Затем вызовите метод save() экземпляра модели.
        В качестве альтернативы вы можете использовать метод create(), чтобы «сохранить» новую модель с помощью одного оператора PHP, лучше чекнуть документацию.
    Обновление моделей =>
        Метод save() - Чтобы обновить модель, вы должны извлечь ее и установить любые атрибуты, которые вы хотите обновить.
        Массовые обновления - Метод update ожидает массив пар ключей и значений, представляющих столбцы, которые вы хотите обновить.
    Удаление моделей =>
        Чтобы удалить модель, вызовите метод delete экземпляра модели.
        Вы можете вызвать метод truncate, чтобы удалить все записи базы данных, связанные с моделью.
        Однако если вы знаете первичный ключ модели, вы можете удалить модель, не извлекая ее, вызвав метод destroy.
    Полезые методы(лучше чекнуть документацию) =>
        Чтобы исключить один или несколько атрибутов из репликации в новую модель, вы можете передать массив в метод replicate.
        Написание глобальных диапазонов - В методе apply можно добавлять условия where или другие типы ограничений к запросу по мере необходимости.
        Методы is и isNot - могут использоваться для быстрой проверки наличия у двух моделей одного и того же первичного ключа.
    События(оч полезно) =>
        Лучше почитать документацию

Конструктор запросов BD::table():
    Выполнение запросов к бд => Вы можете использовать метод table(возвращает текущий экземпляр построителя запросов для данной таблицы) фасада DB, получить результаты используя метод get
    Получение одной строки / столбца из таблицы => Если вам просто нужно получить одну строку из таблицы базы данных, вы можете использовать метод first фасада DB
    Получение из строки конретное значение по столбцу => Если вам не нужна вся строка, вы можете извлечь одно значение из записи с помощью метода value
    Выражения Where =>
        Первый аргумент – это имя столбца.
        Второй аргумент – это оператор, который может быть любым из поддерживаемых базой данных операторов.
        Третий аргумент – это значение, которое нужно сравнить со значением столбца.
    Выражения Where и JSON => Вы можете использовать whereJsonContains для запроса массивов JSON. Эта функция не поддерживается базой данных SQLite
    Дополнительные выражения Where =>
        Метод whereBetween - проверяет, находится ли значение столбца между двумя значениями.
        Метод whereNotBetween - проверяет, что значение столбца находится вне двух значений.
        Метод whereIn - проверяет, что значение переданного столбца содержится в указанном массиве.
        Метод whereNotIn - проверяет, что значение переданного столбца не содержится в указанном массиве.
        Метод whereNull - проверяет, что значение переданного столбца равно NULL.
        Метод whereNotNull - проверяет, что значение переданного столбца не равно NULL.
        Метод whereDate - используется для сравнения значения столбца с датой.
        Метод whereMonth - используется для сравнения значения столбца с конкретным месяцем.
        Метод whereDay - используется для сравнения значения столбца с определенным днем месяца.
        Метод whereYear - используется для сравнения значения столбца с конкретным годом.
        Метод whereTime - используется для сравнения значения столбца с определенным временем.
        Метод whereColumn - используется для проверки равенства двух столбцов.
        Еще есть, но этого хватит
    Сортировка, группировка, ограничение и смещение =>
        Сортировка orderBy - Первый аргумент, принимаемый методом, должен быть столбцом,по которому вы хотите выполнить сортировку,
        а второй аргумент определяет направление сортировки и может быть либо asc, либо desc.
        Методы latest и oldest - позволяют легко упорядочивать результаты по дате.
        Случайный порядок - Метод inRandomOrder используется для случайной сортировки результатов запроса.
        Удаление существующих сортировок - Метод reorder удаляет все выражения ORDER BY, которые ранее были применены к запросу.
        Методы groupBy и having - Как и следовало ожидать, для группировки результатов запроса могут использоваться методы groupBy и having,
        сигнатура метода having аналогична сигнатуре метода where.
        Методы skip и take - Вы можете использовать методы, чтобы ограничить количество результатов, возвращаемых запросом.
        Вставка - метод insert, который можно использовать для вставки записей в таблицу базы данных.
        Метод update - как и метод insert, принимает массив пар столбцов и значений, указывающих столбцы, которые нужно обновить.
        Обновление столбцов JSON - При обновлении столбца JSON вы должны использовать синтаксис -> для обновления соответствующего ключа в объекте JSON.
        Метод delete - построитель запросов может использоваться для удаления записей из таблицы.
        Метод truncate - Если вы хотите очистить всю таблицу, что приведет к удалению всех записей из таблицы и сбросу автоинкрементного идентификатора на ноль.



Requests - используется для валидации полей, создается командой make:requests
